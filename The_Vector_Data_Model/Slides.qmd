---
format:
  revealjs:
    theme: serif
    code-fold: true
    controls: true
    navigation-mode: linear
    controls-layout: bottom-right
    controls-tutorial: true
    slide-number: true
    show-slide-number: all
    pdfMaxPagesPerSlide: 1
fig-dpi: 300

---


Vector Data Model
=================

::::{.columns}
:::{.column width="100%"}


 A more complex, but light weight format best suited for **discrete objects**.
 
:::
::::


Vector Data Model
-----------------


::::{.columns}
:::{.column width="50%"}


Represents space **discretely**:


* Objects delineated using sets of coordinate pairs.
+ Linked to descriptive attributes
+ Many attributes per object

:::
:::{.column width="50%"}


![](images/03-vector-example.png)


:::
::::


Points
------


::::{.columns}
:::{.column width="50%"}


A point feature is an individual x, y coordinate pair representing a precise location.


* “Zero-dimensional”
* No length, width, or area


:::
:::{.column width="50%"}


![](images/03-vector-example.png)


:::
::::


Points
------


::::{.columns}
:::{.column width="50%"}


Points are great for representing a variety of objects, depending on the scale:


**Almost Any Scale**

* Trees
* Stop signs
* Fire hydrants


:::
:::{.column width="50%"}


![](images/Van_Maple.png)


:::
::::


Points
------


::::{.columns}
:::{.column width="50%"}


Points are great for representing a variety of objects, depending on the scale:


**Smaller Scales**

* Cities
* Wild Fires
* Airports

:::
:::{.column width="50%"}

![](images/map-of-canada-with-cities.jpg)


:::
::::

Lines
-----


::::{.columns}
:::{.column width="50%"}


A line feature is a set of connected points. **Must** have a start and end point. *May* have middle points (vertices).


* One-dimensional
* Length
* No width or area


:::
:::{.column width="50%"}


![](images/03-vector-example.png)


:::
::::


Lines
-----


::::{.columns}
:::{.column width="50%"}


Lines are also great for representing a variety of objects, depending on the scale:


**Almost Any Scale**

* Hiking trails
* Power lines
* Water pipes

:::
:::{.column width="50%"}


![](images/AT_map.png)

:::
::::

Lines
-----


::::{.columns}
:::{.column width="50%"}


Lines are also great for representing a variety of objects, depending on the scale:


**Smaller Scales**

* Roads
* Rivers
* Storm tracks


:::
:::{.column width="50%"}


![](images/03-river-scale.png)


:::
::::


Polygons
--------


::::{.columns}
:::{.column width="50%"}


A polygon feature consist of a set of **three** or more vertices connected by line segments (edges) that form an enclosed shape.


* Two-dimensional
* Length **&** width
* **Area**


:::
:::{.column width="50%"}


![](images/03-vector-example.png)


:::
::::


Polygons
--------


::::{.columns}
:::{.column width="50%"}


Preferred for many objects depending on scale:


**Almost Any Scale**

* Climate units
* Lakes
* Political boundaries

:::
:::{.column width="50%"}

![](images/Canada_Köppen.svg)


:::
::::


Polygons
--------


::::{.columns}
:::{.column width="50%"}


Preferred for many objects depending on scale:

**Larger Scales**

* Buildings
* Roads
* Cities


:::
:::{.column width="50%"}


<div style="overflow: hidden;
padding-top: 100%;
position: relative">
<iframe src="html/Bldg.html" title="Processes" scrolling="no" frameborder="0"
style="border: 0;
height: 150%;
left: 0;
position: absolute;
top: 0;
width: 100%;">
</iframe>
</div>

:::
::::


Interior Rings
--------------

All polygons are an enclosed shape. Some can also have interior rings (holes).

::::{.columns}
:::{.column width="50%"}


* Each ring is a separate set of vertices and edges within the polygon
* Interior rings **cannot** overlap


:::
:::{.column width="50%"}


![](images/doughnut.jpg){width="150%"}

:::
::::


TopHat Question 1
=================


::::{.columns}
:::{.column width="100%"}


The vector data model can represent objects as: (select all that apply)


* Points
* Lines
* Polygons
* Surfaces

:::
::::

Multi-part Objects
------------------


::::{.columns}
:::{.column width="50%"}


When an object has multiple parts, the vector model allows for:


* Multi-polygons
* Multi-lines
* Multi-points

:::
:::{.column width="50%"}

![](images/BC_Bounds.png)

:::
::::


Resolution
----------


::::{.columns}
:::{.column width="55%"}


Data resolution also applies to the vector model:


* Less straightforward than for raster model
* Spacing between vertices
  + Smallest resolvable feature

* Higher resolution = larger file size


:::
:::{.column width="45%"}

![](images/03-vector-resolution.png)


:::
::::


TopHat Question 2
=================


::::{.columns}
:::{.column width="100%"}


The resolution of a vector layer is defined by


* The cell size
* The spacing between vertices
* The point size
* The number of attributes


:::
::::


Attribute Tables
----------------

Non-spatial data is stored separate from spatial data.

::::{.columns}
:::{.column width="55%"}

* Linked by an **index**
  + A **unique** identifier
  + No two objects can have the same index
  + Often labelled as the "FID" in Arc

:::
:::{.column width="45%"}

![](images/03-vector-attribute.png)


:::
::::


Attribute Tables
----------------


::::{.columns}
:::{.column width="50%"}


![](images/03-vector.png)


:::
:::{.column width="50%"}

![](images/03-vector-attribute.png)


:::
::::


Attribute Tables
----------------

Non-spatial data is stored separate from spatial data.

::::{.columns}
:::{.column width="55%"}

* Ability to store many attributes
+ Less redundancy than raster model
+ Easy to add new attributes


:::
:::{.column width="45%"}

![](images/03-vector-attribute.png)


:::
::::


TopHat Question 3
=================


::::{.columns}
:::{.column width="100%"}


In the vector data model, each object can only have one attribute.  We must stack objects if we need multiple attributes.


* True
* False


:::
::::


Loss of Variability
-------------------


::::{.columns}
:::{.column width="60%"}

Similar to the mixed pixel problem, feature is treated as homogenous


* What a unit covers multiple values?
+ Any variability is lost and the unit is treated as homogenous


:::
:::{.column width="40%"}

![](images/BBECA.png)


:::
::::


Vector Overlay
--------------


::::{.columns}
:::{.column width="60%"}


More computationally expensive than raster overlay.


* Calculate the relative positions of ever vertex in every layer 
  + Determine overlap, containment, etc.
  + Many operations depending task


:::
:::{.column width="40%"}

![](images/Vector_Overlay_Operators.png)


:::
::::


Field Calculator
----------------


::::{.columns}
:::{.column width="60%"}

* Fields can be "variables" in linear equations
  + Won't update if field values change
* Not always intuitive
  + Can't calculate the sum of a column without extra steps

:::
:::{.column width="40%"}

![](images/Pop_Dense.png)



:::
::::


Field Calculator
----------------


::::{.columns}
:::{.column width="60%"}


* Fields can be "variables" in linear equations
  + Won't update if field values change
* Not always intuitive
  + Can't calculate the sum of a column without extra steps

:::
:::{.column width="40%"}


![](images/FieldCalc.png)


:::
::::


Topology
--------

The spatial relationships between geographic features.


::::{.columns}
:::{.column width="50%"}

* Important for route finding
  + Google maps uses topology for directions
  + Rules by feature 
    - Pedestrian
    - Car
    - Transit

:::
:::{.column width="50%"}

![](images/Topology.gif)


:::
::::


Topology
--------

The spatial relationships between geographic features.


::::{.columns}
:::{.column width="50%"}

* We can set rules e.g.:
  + Polygons (i.e. buildings) cannot overlap
  + Points (i.e. fire hydrants) must be attached to lines (i.e. water mains)


:::
:::{.column width="50%"}

![](images/Topology.gif)


:::
::::



Key Advantages
--------------


::::{.columns}
:::{.column width="100%"}


The vector data model is well suited for discrete objects:

* The compact data structure allows for smaller file sizes relative to the raster dta model
* Easy to query and select by attributes
  * Topology > Proximity & Network Analysis

* Graphic output is usually "cleaner"
  + For final production maps, often useful to convert to vector format


:::
::::


TopHat Question 4
=================


::::{.columns}
:::{.column width="100%"}


This term describes the spatial relationships between features:


* Topology
* Resolution
* Vertex
* Attributes
* Vector


:::
::::


Shapefiles
----------

One of the most common file types you will encounter, stores the coordinates of vertices plus metadata. Identified by a .shp tag.


* Object type: points/multi-points, lines/multi-lines, or polygons/multi-polygons.
+ **Only** one type per .shp!

* Coordinate reference system (CRS).
* Attribute table.



GeoJSON
-------

A simple, lightweight format for most commonly encountered in web mapping. Identified by a .json tag.


* Unlike shapefiles, a GeoJSON can mix of geometries.
* Encoded stylistic choices in the file.
* Larger File Size
* [An Example](https://geojson.io/#map=2/20.0/0.0))



Text Data {.smaller}
---------


```{r include=FALSE}
library(knitr)
```


```{r}
#| label: tbl-wx
#| tbl-cap: "BC Weather Stations"
#| tbl-colwidths: [30,10,20,20,20]

csv <- read.csv(file = 'data/wx.csv')
kable(csv)

```
  
TopHat Question 5
=================


::::{.columns}
:::{.column width="100%"}


The Vector data model is almost always a better choice than the raster data model because:


* It represents objects discretely
* It has better resolution for a given file size
* We can store many attributes for one object without creating redundancy
* The vector data model is not always better than the raster data model


:::
::::


